---
layout: post
title:  "Frequently Asked Questions"
kicker: "Basics"
summary: "This post answers frequently asked questions about the Rust programming language. It neither serves as a comprehensive manual for the language nor as a tool for teaching the language."
image: assets/images/posts-cover-images/rust-faqs.jpg
image-credits: "AI-generated image by <a href='https://www.freepik.com/' target='_blank'>freepik</a>."
imageshadow: true
toc: true
author: senthil
date: 2023-11-23 00:00:00 +0530
# last_modified_at: 2023-11-18
tags: [ "basics", "faqs" ]
categories: Basics
featured: false
hidden: true
---

# Compilation

## What options do we have to improve the "liking stage" during Rust's compilation?

A considerable amount of time appears to be spent to the **linkage phase**[^1] of the compilation. Despite the fact that the default linker performs reasonably well, better alternatives exist, depending on the operating system we have:

- **Windows**: [LLD](https://lld.llvm.org/windows_support.html#downloading-lld){:target="_blank"}
- **Linux**: [LLVM](https://releases.llvm.org/download.html){:target="_blank"}
- **macos**: [zld](https://github.com/michaeleisel/zld/releases/tag/1.3.9.1){:target="_blank"}

---

# Data types

## What are the differences between the two different string types?

In Rust, there are two types of strings: 
 - `String` 
   - `String` is a heap-allocated, growable, mutable string.
   - 
 - `&str`
   - `&str` is a string reference slice, aka **string slice**.
   - 


## How can I convert a String or to a slice, &str?

todo

---

# Collections

todo

---

# Ownership, borrowing, and lifetimes

todo

---

# Concurrency

todo

---

# Error handling

## What is panic in Rust?

A **panic** is the term refers to the occurrence of a _runtime error_ that causes the program to terminate abruptly. It indicates that a program has reached a state where further execution is not possible or safe. 

When a panic occurs, the runtime system begins to unwind the stack of the thread where the panic happened. Unwinding involves the cleanup of stacks and resources, such as freeing memory and running destructors for local variables, in reverse order of their creation.

---

# Design Patterns

todo

---

# Generics

todo

---

# Macros

todo

---

# Testing

## What is fuzz testing or fuzzing?

Fuzzing, or fuzz testing, is a software testing technique that involves providing invalid, unexpected, malformed, or random data as inputs to a computer program to reveal vulnerabilities, bugs, or unexpected behavior in the target software. This helps identify areas of the code that may be susceptible to security vulnerabilities or other issues.

---

[^1]: Linking is the process of combining one or more object files generated by a compiler or an assembler and combining them into a single executable file, library file, or another object file.